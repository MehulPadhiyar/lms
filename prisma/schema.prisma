generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  category_id Int    @id @default(autoincrement())
  name        String @unique(map: "Category_name_key")

  courses Course[]
}

model Chapter {
  chapter_id  String  @id @default(dbgenerated("(uuid())")) @db.VarChar(250)
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  course_id String
  course    Course @relation(fields: [course_id], references: [course_id], onDelete: Cascade)

  userProgress UserProgress[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([course_id])
}

model Course {
  course_id   String  @id @default(dbgenerated("(uuid())")) @db.VarChar(250)
  title       String  @db.Text
  description String? @db.Text
  image_url   String? @db.Text
  price       Float?
  status      Status  @default(draft)

  user_id String
  user    User?  @relation(fields: [user_id], references: [user_id])

  category_id Int?
  category    Category? @relation(fields: [category_id], references: [category_id])

  chapters  Chapter[]
  purchases Purchase[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([category_id])
  @@index([user_id])
  @@fulltext([title])
}

model Sample {
  sample_id String @id @default(dbgenerated("(uuid())")) @db.VarChar(250)
  video_url String @db.Text

  user_id String
  user    User?  @relation(fields: [user_id], references: [user_id])
}

model Purchase {
  purchase_id String @id @default(dbgenerated("(uuid())")) @db.VarChar(250)

  course_id String
  course    Course @relation(fields: [course_id], references: [course_id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, course_id])
  @@index([course_id])
}

model User {
  user_id                String    @id @default(dbgenerated("(uuid())")) @db.VarChar(250)
  name                   String    @db.VarChar(45)
  email                  String    @unique(map: "email_UNIQUE") @db.VarChar(45)
  password               String    @db.VarChar(250)
  photo                  String?   @db.VarChar(45)
  role                   User_role @default(user)
  active                 Int?      @default(1) @db.TinyInt
  password_reset_token   String?   @db.VarChar(250)
  password_reset_expires BigInt?

  courses      Course[]
  samples      Sample[]
  purchases    Purchase[]
  userProgress UserProgress[]
}

model UserProgress {
  id          String  @id @default(dbgenerated("(uuid())")) @db.VarChar(250)
  isCompleted Boolean @default(false)

  chapter_id String
  chapter    Chapter @relation(fields: [chapter_id], references: [chapter_id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user_id, chapter_id])
  @@index([chapter_id])
}

enum User_role {
  user
  instructor
  admin
}

enum Status {
  draft
  pending
  verified
  rejected
}
